<div style="min-height: 100vh; background-color: #111827; color: white;">
  <!-- Header -->
  <header style="background-color: #1f2937; border-bottom: 1px solid #374151; padding: 1rem 2rem;">
    <div style="max-width: none; margin: 0; display: flex; justify-content: space-between; align-items: center;">
      <div style="display: flex; align-items: center; gap: 1rem;">
        <!-- Logo -->
        <div style="width: 2.5rem; height: 2.5rem; background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
          <div style="width: 1.25rem; height: 1.25rem; background-color: white; border-radius: 50%;"></div>
        </div>
        <h1 style="font-size: 1.25rem; font-weight: 600; margin: 0;">
          <a href="/dashboard" style="color: white; text-decoration: none;">AI Context Service</a>
        </h1>
      </div>
      
      <div style="display: flex; align-items: center; gap: 1rem;">
        <span style="color: #9ca3af; font-size: 0.875rem;">Welcome, <%= user.fullName %></span>
        <a href="/logout" style="background-color: #374151; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; text-decoration: none; font-size: 0.875rem; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#4b5563'" onmouseout="this.style.backgroundColor='#374151'">
          Sign Out
        </a>
      </div>
    </div>
  </header>

  <!-- Breadcrumb -->
  <nav style="background-color: #1f2937; border-bottom: 1px solid #374151; padding: 1rem 2rem;">
    <div style="display: flex; align-items: center; gap: 0.5rem; color: #9ca3af; font-size: 0.875rem;">
      <a href="/dashboard" style="color: #8b5cf6; text-decoration: none;">Dashboard</a>
      <span>/</span>
      <a href="/dashboard/projects" style="color: #8b5cf6; text-decoration: none;">Projects</a>
      <span>/</span>
      <span><%= projectName %></span>
    </div>
  </nav>

  <!-- Main Content -->
  <div style="display: flex; height: calc(100vh - 140px);">
    
    <!-- File Tree Sidebar -->
    <div id="file-tree-sidebar" style="width: 300px; background-color: #1f2937; border-right: 1px solid #374151; display: flex; flex-direction: column;">
      <!-- Sidebar Header -->
      <div style="padding: 1rem; border-bottom: 1px solid #374151;">
        <h3 style="font-size: 1rem; font-weight: 600; margin: 0; display: flex; align-items: center; gap: 0.5rem;">
          <span>üìÅ</span>
          <%= projectName %>
        </h3>
      </div>
      
      <!-- File Tree -->
      <div id="file-tree" style="flex: 1; overflow-y: auto; padding: 0.5rem;">
        <div id="tree-loading" style="padding: 1rem; text-align: center; color: #9ca3af;">
          Loading files...
        </div>
      </div>
    </div>

    <!-- File Content Area -->
    <div style="flex: 1; display: flex; flex-direction: column;">
      
      <!-- Content Header -->
      <div id="content-header" style="background-color: #1f2937; border-bottom: 1px solid #374151; padding: 1rem 2rem; display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div>
            <h4 id="current-file-name" style="font-size: 1rem; font-weight: 600; margin: 0; color: white;"></h4>
            <p id="current-file-info" style="color: #9ca3af; font-size: 0.875rem; margin: 0.25rem 0 0 0;"></p>
          </div>
          <div id="file-actions" style="display: flex; gap: 0.5rem;">
            <!-- File actions can be added here -->
          </div>
        </div>
      </div>
      
      <!-- File Content -->
      <div id="file-content-area" style="flex: 1; background-color: #111827; position: relative;">
        <!-- Welcome Message -->
        <div id="welcome-message" style="display: flex; align-items: center; justify-content: center; height: 100%; text-align: center;">
          <div>
            <div style="width: 4rem; height: 4rem; background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 1rem;">
              <span style="color: white; font-size: 1.5rem;">üìÑ</span>
            </div>
            <h3 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem;">Select a file to view</h3>
            <p style="color: #9ca3af;">Choose a file from the tree on the left to view its contents.</p>
          </div>
        </div>
        
        <!-- File Content Display -->
        <div id="file-content" style="display: none; height: 100%; overflow: auto;">
          <pre id="file-text-content" style="margin: 0; padding: 2rem; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 0.875rem; line-height: 1.5; color: #e5e7eb; background-color: transparent; white-space: pre-wrap; word-wrap: break-word;"></pre>
        </div>
        
        <!-- Loading Indicator -->
        <div id="content-loading" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: #9ca3af;">
          <div style="width: 2rem; height: 2rem; border: 2px solid #374151; border-top: 2px solid #8b5cf6; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem;"></div>
          Loading file...
        </div>
        
        <!-- Error Message -->
        <div id="content-error" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: #ef4444;">
          <div style="width: 3rem; height: 3rem; background-color: #dc2626; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 1rem;">
            <span style="color: white; font-size: 1.125rem;">‚ö†</span>
          </div>
          <h4 id="error-title" style="font-size: 1rem; font-weight: 600; margin-bottom: 0.5rem;">Error</h4>
          <p id="error-message" style="color: #9ca3af; font-size: 0.875rem;"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.tree-item {
  display: flex;
  align-items: center;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  border-radius: 0.25rem;
  transition: background-color 0.2s;
}

.tree-item:hover {
  background-color: #374151;
}

.tree-item.selected {
  background-color: #8b5cf6;
  color: white;
}

.tree-item .icon {
  margin-right: 0.5rem;
  font-size: 0.875rem;
}

.tree-item .name {
  flex: 1;
  font-size: 0.875rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.tree-folder {
  margin-left: 1rem;
  border-left: 1px solid #374151;
  padding-left: 0.5rem;
}

.tree-folder.collapsed {
  display: none;
}
</style>

<script>
const projectName = '<%= projectName %>';
let currentPath = '';
let selectedFile = null;

// Initialize file tree
async function loadFileTree(path = '') {
  try {
    const response = await fetch(`/api/projects/${encodeURIComponent(projectName)}/tree?path=${encodeURIComponent(path)}`);
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Failed to load file tree');
    }
    
    return data.tree;
  } catch (error) {
    console.error('Error loading file tree:', error);
    return [];
  }
}

// Render file tree
function renderTree(items, container, basePath = '') {
  container.innerHTML = '';
  
  items.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'tree-item';
    itemElement.dataset.path = item.path;
    itemElement.dataset.isDirectory = item.isDirectory;
    
    const icon = document.createElement('span');
    icon.className = 'icon';
    icon.textContent = item.isDirectory ? 'üìÅ' : 'üìÑ';
    
    const name = document.createElement('span');
    name.className = 'name';
    name.textContent = item.name;
    
    itemElement.appendChild(icon);
    itemElement.appendChild(name);
    
    if (item.isDirectory) {
      itemElement.addEventListener('click', () => toggleFolder(itemElement, item.path));
    } else {
      itemElement.addEventListener('click', () => selectFile(itemElement, item.path));
    }
    
    container.appendChild(itemElement);
    
    // Add folder container for directories
    if (item.isDirectory) {
      const folderContainer = document.createElement('div');
      folderContainer.className = 'tree-folder collapsed';
      folderContainer.id = `folder-${item.path.replace(/[^a-zA-Z0-9]/g, '-')}`;
      container.appendChild(folderContainer);
    }
  });
}

// Toggle folder expand/collapse
async function toggleFolder(element, path) {
  const folderId = `folder-${path.replace(/[^a-zA-Z0-9]/g, '-')}`;
  const folderContainer = document.getElementById(folderId);
  
  if (!folderContainer) return;
  
  if (folderContainer.classList.contains('collapsed')) {
    // Expand folder
    const items = await loadFileTree(path);
    renderTree(items, folderContainer);
    folderContainer.classList.remove('collapsed');
    element.querySelector('.icon').textContent = 'üìÇ';
  } else {
    // Collapse folder
    folderContainer.classList.add('collapsed');
    element.querySelector('.icon').textContent = 'üìÅ';
  }
}

// Select and display file
async function selectFile(element, path) {
  // Remove previous selection
  document.querySelectorAll('.tree-item.selected').forEach(item => {
    item.classList.remove('selected');
  });
  
  // Add selection to current item
  element.classList.add('selected');
  selectedFile = path;
  
  // Show loading
  showContentLoading();
  
  try {
    const response = await fetch(`/api/projects/${encodeURIComponent(projectName)}/file?path=${encodeURIComponent(path)}`);
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Failed to load file');
    }
    
    displayFile(path, data);
    
  } catch (error) {
    console.error('Error loading file:', error);
    showContentError('Failed to load file', error.message);
  }
}

// Display file content
function displayFile(path, fileData) {
  const fileName = path.split('/').pop();
  const fileSize = formatFileSize(fileData.size);
  const modifiedDate = new Date(fileData.modified).toLocaleString();
  
  // Update header
  document.getElementById('current-file-name').textContent = fileName;
  document.getElementById('current-file-info').textContent = `${fileSize} ‚Ä¢ Modified ${modifiedDate}`;
  document.getElementById('content-header').style.display = 'block';
  
  // Hide welcome message and loading
  document.getElementById('welcome-message').style.display = 'none';
  document.getElementById('content-loading').style.display = 'none';
  document.getElementById('content-error').style.display = 'none';
  
  if (fileData.content !== null) {
    // Display text content
    document.getElementById('file-text-content').textContent = fileData.content;
    document.getElementById('file-content').style.display = 'block';
  } else {
    // Show error for non-text files
    showContentError(
      fileData.error || 'Cannot display file',
      fileData.type === 'binary' ? 'This is a binary file that cannot be displayed in the browser.' : fileData.error
    );
  }
}

// Show loading state
function showContentLoading() {
  document.getElementById('welcome-message').style.display = 'none';
  document.getElementById('file-content').style.display = 'none';
  document.getElementById('content-error').style.display = 'none';
  document.getElementById('content-loading').style.display = 'block';
  document.getElementById('content-header').style.display = 'none';
}

// Show error state
function showContentError(title, message) {
  document.getElementById('welcome-message').style.display = 'none';
  document.getElementById('file-content').style.display = 'none';
  document.getElementById('content-loading').style.display = 'none';
  document.getElementById('content-header').style.display = 'none';
  
  document.getElementById('error-title').textContent = title;
  document.getElementById('error-message').textContent = message;
  document.getElementById('content-error').style.display = 'block';
}

// Format file size
function formatFileSize(bytes) {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', async () => {
  const treeContainer = document.getElementById('file-tree');
  const loadingElement = document.getElementById('tree-loading');
  
  try {
    const rootItems = await loadFileTree();
    loadingElement.style.display = 'none';
    renderTree(rootItems, treeContainer);
  } catch (error) {
    console.error('Error initializing file tree:', error);
    loadingElement.textContent = 'Error loading files';
    loadingElement.style.color = '#ef4444';
  }
});
</script>